import { useFormik } from "formik";
import type { NextPage } from "next";
import Head from "next/head";
import * as Yup from 'yup'
import { companySchema, ICompany } from "../../schema/company.schema";
import { trpc } from "../../utils/trpc";

const CreateCompanyPage: NextPage = () => {
  const mutation = trpc.useMutation(["companies.createCompany"]);
  const formik = useFormik<ICompany>({
    initialValues: {
      name: "",
      description: "",
    },
    validationSchema: Yup.object().shape({
    name: Yup.string()
      .min(3).required('Name is required!'),
  }),
    onSubmit: (values: ICompany, actions) => {
      const result = mutation.mutate(values);
      actions.setSubmitting(false)
      actions.resetForm();
    },

  });
  return (
    <div>
      <Head>
        <title>New Company</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <form
          className="flex items-center justify-center h-screen w-full"
          onSubmit={formik.handleSubmit}
        >
          <div className="card w-96 bg-base-100 shadow-xl">
            <div className="card-body">
              <h2 className="card-title">Create an new company</h2>
              <input
                type="text"
                name="name"
                placeholder="Company name..."
                className="input input-bordered w-full max-w-xs my-2"
                autoComplete="off"
                onChange={formik.handleChange}
                value={formik.values.name}
              />
              { formik.errors.name ? <div>{ formik.errors.name }</div> : null }
              <input
                type="text"
                name="description"
                placeholder="Description..."
                className="input input-bordered w-full max-w-xs"
                autoComplete="off"
                onChange={formik.handleChange}
                value={formik.values.description}
              />
              {mutation.error && (
                <p className="text-sm text-red-600">
                  Something went wrong! {mutation.error.message}
                </p>
              )}
              <button className="btn btn-secondary" type="submit">
                Submit
              </button>
            </div>
          </div>
        </form>
      </main>
    </div>
  );
};

export default CreateCompanyPage;
